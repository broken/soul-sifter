//
//  REAlbumCover.cpp
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#include "REAlbumCover.h"

#include <string>

#include <cppconn/connection.h>
#include <cppconn/statement.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>
#include <cppconn/warning.h>

#include "MysqlAccess.h"
#include "DTVectorUtil.h"

using namespace std;

namespace soulsifter {

# pragma mark initialization

    REAlbumCover::REAlbumCover() :
    id(0),
    reId(),
    thumbnail() {
    }

    REAlbumCover::REAlbumCover(const REAlbumCover& reAlbumCover) :
    id(reAlbumCover.getId()),
    reId(reAlbumCover.getREId()),
    thumbnail(reAlbumCover.getThumbnail()) {
    }

    void REAlbumCover::operator=(const REAlbumCover& reAlbumCover) {
        id = reAlbumCover.getId();
        reId = reAlbumCover.getREId();
        thumbnail = reAlbumCover.getThumbnail();
    }

    REAlbumCover::~REAlbumCover() {
    }

    void REAlbumCover::clear() {
        id = 0;
        reId.clear();
        thumbnail.clear();
    }

# pragma mark static methods

    void REAlbumCover::populateFields(const sql::ResultSet* rs, REAlbumCover* reAlbumCover) {
        reAlbumCover->setId(rs->getInt("id"));
        reAlbumCover->setREId(rs->getString("reId"));
        reAlbumCover->setThumbnail(rs->getString("thumbnail"));
    }

    REAlbumCover* REAlbumCover::findById(int id) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from REAlbumCovers where id = ?");
            ps->setInt(1, id);
            sql::ResultSet *rs = ps->executeQuery();
            REAlbumCover *reAlbumCover = NULL;
            if (rs->next()) {
                reAlbumCover = new REAlbumCover();
                populateFields(rs, reAlbumCover);
            }
            rs->close();
            delete rs;

            return reAlbumCover;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    REAlbumCover* REAlbumCover::findByREId(const string& reId) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from REAlbumCovers where reId = ?");
            ps->setString(1, reId);
            sql::ResultSet *rs = ps->executeQuery();
            REAlbumCover *reAlbumCover = NULL;
            if (rs->next()) {
                reAlbumCover = new REAlbumCover();
                populateFields(rs, reAlbumCover);
            }
            rs->close();
            delete rs;

            return reAlbumCover;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    dogatech::ResultSetIterator<REAlbumCover>* REAlbumCover::findAll() {
        sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from REAlbumCovers");
        sql::ResultSet *rs = ps->executeQuery();
        dogatech::ResultSetIterator<REAlbumCover> *dtrs = new dogatech::ResultSetIterator<REAlbumCover>(rs);
        return dtrs;
    }

# pragma mark persistence

    bool REAlbumCover::sync() {
        REAlbumCover* reAlbumCover = findById(id);
        if (!reAlbumCover) reAlbumCover = findByREId(reId);
        if (!reAlbumCover) {
            return true;
        }

        // check fields
        bool needsUpdate = false;
        if (id != reAlbumCover->getId()) {
            if (id) {
                cout << "updating reAlbumCover " << id << " id from " << reAlbumCover->getId() << " to " << id << endl;
                needsUpdate = true;
            } else {
                id = reAlbumCover->getId();
            }
        }
        if (reId.compare(reAlbumCover->getREId()) && (!atoi(reAlbumCover->getREId().c_str()) || !atoi(reId.c_str()) || atoi(reAlbumCover->getREId().c_str()) != atoi(reId.c_str()))) {
            if (!reId.empty()) {
                cout << "updating reAlbumCover " << id << " reId from " << reAlbumCover->getREId() << " to " << reId << endl;
                needsUpdate = true;
            } else {
                reId = reAlbumCover->getREId();
            }
        }
        if (thumbnail.compare(reAlbumCover->getThumbnail()) && (!atoi(reAlbumCover->getThumbnail().c_str()) || !atoi(thumbnail.c_str()) || atoi(reAlbumCover->getThumbnail().c_str()) != atoi(thumbnail.c_str()))) {
            if (!thumbnail.empty()) {
                cout << "updating reAlbumCover " << id << " thumbnail from " << reAlbumCover->getThumbnail() << " to " << thumbnail << endl;
                needsUpdate = true;
            } else {
                thumbnail = reAlbumCover->getThumbnail();
            }
        }
        return needsUpdate;
    }

    int REAlbumCover::update() {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("update REAlbumCovers set reId=?, thumbnail=? where id=?");
            ps->setString(1, reId);
            ps->setString(2, thumbnail);
            ps->setInt(3, id);
            int result = ps->executeUpdate();
            return result;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    int REAlbumCover::save() {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("insert into REAlbumCovers (reId, thumbnail) values (?, ?)");
            ps->setString(1, reId);
            ps->setString(2, thumbnail);
            int saved = ps->executeUpdate();
            if (!saved) {
                cerr << "Not able to save reAlbumCover" << endl;
                return saved;
            } else {
                const int id = MysqlAccess::getInstance().getLastInsertId();
                if (id == 0) {
                    cerr << "Inserted reAlbumCover, but unable to retreive inserted ID." << endl;
                    return saved;
                }
                return saved;
            }
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }


# pragma mark accessors

    const int REAlbumCover::getId() const { return id; }
    void REAlbumCover::setId(const int id) { this->id = id; }

    const string& REAlbumCover::getREId() const { return reId; }
    void REAlbumCover::setREId(const string& reId) { this->reId = reId; }

    const string& REAlbumCover::getThumbnail() const { return thumbnail; }
    void REAlbumCover::setThumbnail(const string& thumbnail) { this->thumbnail = thumbnail; }

}
