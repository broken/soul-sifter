//
//  Style.cpp
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#include "Style.h"

#include <string>

#include <cppconn/connection.h>
#include <cppconn/statement.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>
#include <cppconn/warning.h>

#include "MysqlAccess.h"

using namespace std;

namespace soulsifter {

# pragma mark initialization

    Style::Style() :
    id(0),
    name(),
    reId(0),
    reCsvName(),
    children(),
    parents() {
    }

    Style::Style(const Style& style) :
    id(style.getId()),
    name(style.getName()),
    reId(style.getREId()),
    reCsvName(style.getRECsvName()),
    children(),
    parents() {
        children = style.getChildren();
        parents = style.getParents();
    }

    void Style::operator=(const Style& style) {
        id = style.getId();
        name = style.getName();
        reId = style.getREId();
        reCsvName = style.getRECsvName();
        children = style.getChildren();
        parents = style.getParents();
    }

    Style::~Style() {
        for (vector<Style*>::iterator it = children.begin(); it != children.end(); ++it) {
            delete *it;
        }
        children.clear();
        for (vector<Style*>::iterator it = parents.begin(); it != parents.end(); ++it) {
            delete *it;
        }
        parents.clear();
    }

    void Style::clear() {
        id = 0;
        name.clear();
        reId = 0;
        reCsvName.clear();
        for (vector<Style*>::iterator it = children.begin(); it != children.end(); ++it) {
            delete *it;
        }
        children.clear();
        for (vector<Style*>::iterator it = parents.begin(); it != parents.end(); ++it) {
            delete *it;
        }
        parents.clear();
    }

# pragma mark static methods

    void Style::populateFields(const sql::ResultSet* rs, Style* style) {
        style->setId(rs->getInt("id"));
        style->setName(rs->getString("name"));
        style->setREId(rs->getInt("reId"));
        style->setRECsvName(rs->getString("reCsvName"));
        // TODO set children
        // TODO set parents
    }

    Style* Style::findById(int id) {
        sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from Styles where id = ?");
        ps->setInt(1, id);
        sql::ResultSet *rs = ps->executeQuery();
        Style *style = NULL;
        if (rs->next()) {
            style = new Style();
            populateFields(rs, style);
        }
        rs->close();
        delete rs;

        return style;
    }

    Style* Style::findByREId(int reId) {
        sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from Styles where reId = ?");
        ps->setInt(1, reId);
        sql::ResultSet *rs = ps->executeQuery();
        Style *style = NULL;
        if (rs->next()) {
            style = new Style();
            populateFields(rs, style);
        }
        rs->close();
        delete rs;

        return style;
    }

# pragma mark persistence

    bool Style::sync() {
        Style* style = findById(id);
        if (!style) {
            return true;
        }

        // check fields
        bool needsUpdate = false;
        if (id != style->getId()) {
            if (id) {
                cout << "updating style's id from " << style->getId() << " to " << id << endl;
                needsUpdate = true;
            } else {
                id = style->getId();
            }
        }
        if (name.compare(style->getName())) {
            if (!name.empty()) {
                cout << "updating style name from " << style->getName() << " to " << name << endl;
                needsUpdate = true;
            } else {
                name = style->getName();
            }
        }
        if (reId != style->getREId()) {
            if (reId) {
                cout << "updating style's reId from " << style->getREId() << " to " << reId << endl;
                needsUpdate = true;
            } else {
                reId = style->getREId();
            }
        }
        if (reCsvName.compare(style->getRECsvName())) {
            if (!reCsvName.empty()) {
                cout << "updating style reCsvName from " << style->getRECsvName() << " to " << reCsvName << endl;
                needsUpdate = true;
            } else {
                reCsvName = style->getRECsvName();
            }
        }
        return needsUpdate;
    }

    int Style::update() {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("update Styles set name=?, reId=?, reCsvName=? where id=?");
            ps->setString(1, name);
            ps->setInt(2, reId);
            ps->setString(3, reCsvName);
            ps->setInt(4, id);
            return ps->executeUpdate();
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            return 0;
        }
    }

    int Style::save() {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("insert into Styles (name, reId, reCsvName) values (?, ?, ?)");
            ps->setString(1, name);
            ps->setInt(2, reId);
            ps->setString(3, reCsvName);
            return ps->executeUpdate();
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            return 0;
        }
    }


# pragma mark accessors

    const int Style::getId() const { return id; }
    void Style::setId(const int id) { this->id = id; }

    const string& Style::getName() const { return name; }
    void Style::setName(const string& name) { this->name = name; }

    const int Style::getREId() const { return reId; }
    void Style::setREId(const int reId) { this->reId = reId; }

    const string& Style::getRECsvName() const { return reCsvName; }
    void Style::setRECsvName(const string& reCsvName) { this->reCsvName = reCsvName; }

    const vector<Style*>& Style::getChildren() const { return children; }
    void Style::setChildren(const vector<Style*>& children) { this->children = children; }
    void Style::addChild(const Style& child) { children.push_back(new Style(child)); }
    void Style::removeChild(int childId) {
        for (vector<Style*>::iterator it = children.begin(); it != children.end(); ++it) {
            if (childId == (*it)->getId()) {
                children.erase(it);
            }
        }
    }

    const vector<Style*>& Style::getParents() const { return parents; }
    void Style::setParents(const vector<Style*>& parents) { this->parents = parents; }
    void Style::addParent(const Style& parent) { parents.push_back(new Style(parent)); }
    void Style::removeParent(int parentId) {
        for (vector<Style*>::iterator it = parents.begin(); it != parents.end(); ++it) {
            if (parentId == (*it)->getId()) {
                parents.erase(it);
            }
        }
    }

}
