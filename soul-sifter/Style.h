//
//  Style.h
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#ifndef __soul_sifter__Style__
#define __soul_sifter__Style__

#include <string>
#include <vector>


namespace sql {
    class ResultSet;
}

using namespace std;

namespace soulsifter {

    class Style {
    public:
        Style();
        explicit Style(const Style& style);
        void operator=(const Style& style);
        ~Style();
        void clear();

        static Style* findById(int id);
        static Style* findByREId(int reId);

        bool sync();
        int update();
        int save();

        bool operator<(const Style& style) const;
        bool operator>(const Style& style) const;

        static void findAll(vector<Style*>** stylesPtr);
        static void findAllSorted(vector<Style*>** stylesPtr);

        const int getId() const;
        void setId(int id);
        const string& getName() const;
        void setName(const string& name);
        const int getREId() const;
        void setREId(int reId);
        const string& getRECsvName() const;
        void setRECsvName(const string& reCsvName);
        const vector<Style*>& getChildren() const;
        void setChildren(const vector<Style*>& children);
        void addChild(const Style& child);
        void removeChild(int childId);
        const vector<Style*>& getParents() const;
        void setParents(const vector<Style*>& parents);
        void addParent(const Style& parent);
        void removeParent(int parentId);

    private:
        int id;
        string name;
        int reId;
        string reCsvName;
        vector<Style*> children;
        vector<Style*> parents;

        static void populateFields(const sql::ResultSet* rs, Style* style);
    };

}

#endif /* defined(__soul_sifter__Style__) */
