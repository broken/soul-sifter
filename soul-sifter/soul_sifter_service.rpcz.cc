// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "soul_sifter_service.rpcz.h"
#include "soul_sifter_service.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/stubs/once.h>
#include <rpcz/rpcz.hpp>
namespace {
const ::google::protobuf::ServiceDescriptor* SoulSifterService_descriptor_ = NULL;
}  // anonymouse namespace

namespace dogatech {
namespace soulsifter {
namespace proto {

void rpcz_protobuf_AssignDesc_soul_5fsifter_5fservice_2eproto() {
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "soul_sifter_service.proto");
  GOOGLE_CHECK(file != NULL);
  SoulSifterService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &rpcz_protobuf_AssignDesc_soul_5fsifter_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void rpcz_protobuf_ShutdownFile_soul_5fsifter_5fservice_2eproto() {
}

void rpcz_protobuf_AddDesc_soul_5fsifter_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dogatech::soulsifter::proto::protobuf_AddDesc_soul_5fsifter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031soul_sifter_service.proto\022\031dogatech.so"
    "ulsifter.proto\032\021soul_sifter.proto\"\034\n\016Get"
    "SongRequest\022\n\n\002id\030\001 \001(\005\" \n\017GetSongRespon"
    "se\022\r\n\005title\030\001 \001(\t\"\307\001\n\020FindSongsRequest\022\r"
    "\n\005query\030\001 \001(\t\0229\n\014key_to_match\030\002 \001(\0162#.do"
    "gatech.soulsifter.proto.TonicKey\022\026\n\010key_"
    "lock\030\003 \001(\010:\004true\022\017\n\007max_bpm\030\004 \001(\005\022\017\n\007min"
    "_bpm\030\005 \001(\005\022/\n\005genre\030\006 \003(\0132 .dogatech.sou"
    "lsifter.proto.Genre\"B\n\021FindSongsResponse"
    "\022-\n\004song\030\001 \003(\0132\037.dogatech.soulsifter.pro"
    "to.Song2\335\001\n\021SoulSifterService\022f\n\tFindSon"
    "gs\022+.dogatech.soulsifter.proto.FindSongs"
    "Request\032,.dogatech.soulsifter.proto.Find"
    "SongsResponse\022`\n\007GetSong\022).dogatech.soul"
    "sifter.proto.GetSongRequest\032*.dogatech.s"
    "oulsifter.proto.GetSongResponse", 631);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "soul_sifter_service.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&rpcz_protobuf_ShutdownFile_soul_5fsifter_5fservice_2eproto);
}

// ===================================================================

SoulSifterService::~SoulSifterService() {}

const ::google::protobuf::ServiceDescriptor* SoulSifterService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulSifterService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SoulSifterService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulSifterService_descriptor_;
}

void SoulSifterService::FindSongs(const ::dogatech::soulsifter::proto::FindSongsRequest&,
                         ::rpcz::reply< ::dogatech::soulsifter::proto::FindSongsResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method FindSongs() not implemented.");
}

void SoulSifterService::GetSong(const ::dogatech::soulsifter::proto::GetSongRequest&,
                         ::rpcz::reply< ::dogatech::soulsifter::proto::GetSongResponse> reply) {
  reply.Error(::rpcz::application_error::METHOD_NOT_IMPLEMENTED,
              "Method GetSong() not implemented.");
}

void SoulSifterService::call_method(const ::google::protobuf::MethodDescriptor* method,
                             const ::google::protobuf::Message& request,
                             ::rpcz::server_channel* channel) {
  GOOGLE_DCHECK_EQ(method->service(), SoulSifterService_descriptor_);
  switch(method->index()) {
    case 0:
      FindSongs(
          *::google::protobuf::down_cast<const ::dogatech::soulsifter::proto::FindSongsRequest*>(&request),
          ::rpcz::reply< ::dogatech::soulsifter::proto::FindSongsResponse>(channel));
      break;
    case 1:
      GetSong(
          *::google::protobuf::down_cast<const ::dogatech::soulsifter::proto::GetSongRequest*>(&request),
          ::rpcz::reply< ::dogatech::soulsifter::proto::GetSongResponse>(channel));
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SoulSifterService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dogatech::soulsifter::proto::FindSongsRequest::default_instance();
    case 1:
      return ::dogatech::soulsifter::proto::GetSongRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SoulSifterService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dogatech::soulsifter::proto::FindSongsResponse::default_instance();
    case 1:
      return ::dogatech::soulsifter::proto::GetSongResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SoulSifterService_Stub::SoulSifterService_Stub(::rpcz::rpc_channel* channel,
                                   const ::std::string& service_name,
                                   bool owns_channel)
  : channel_(channel), service_name_(service_name),
    owns_channel_(owns_channel) {}
SoulSifterService_Stub::SoulSifterService_Stub(::rpcz::rpc_channel* channel,
                                   bool owns_channel)
  : channel_(channel), service_name_(SoulSifterService::descriptor()->name()),
    owns_channel_(owns_channel) {}
SoulSifterService_Stub::~SoulSifterService_Stub() {
  if (owns_channel_) delete channel_;
}

void SoulSifterService_Stub::FindSongs(const ::dogatech::soulsifter::proto::FindSongsRequest& request,
                              ::dogatech::soulsifter::proto::FindSongsResponse* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        SoulSifterService::descriptor()->method(0),
                        request, response, rpc, done);
}
void SoulSifterService_Stub::FindSongs(const ::dogatech::soulsifter::proto::FindSongsRequest& request,
                              ::dogatech::soulsifter::proto::FindSongsResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        SoulSifterService::descriptor()->method(0),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}
void SoulSifterService_Stub::GetSong(const ::dogatech::soulsifter::proto::GetSongRequest& request,
                              ::dogatech::soulsifter::proto::GetSongResponse* response,
                              ::rpcz::rpc* rpc,
                              ::rpcz::closure* done) {
  channel_->call_method(service_name_,
                        SoulSifterService::descriptor()->method(1),
                        request, response, rpc, done);
}
void SoulSifterService_Stub::GetSong(const ::dogatech::soulsifter::proto::GetSongRequest& request,
                              ::dogatech::soulsifter::proto::GetSongResponse* response,
                              long deadline_ms) {
  ::rpcz::rpc rpc;
  rpc.set_deadline_ms(deadline_ms);
  channel_->call_method(service_name_,
                        SoulSifterService::descriptor()->method(1),
                        request, response, &rpc, NULL);
  rpc.wait();
  if (!rpc.ok()) {
    throw ::rpcz::rpc_error(rpc);
  }
}

}  // namespace proto
}  // namespace soulsifter
}  // namespace dogatech
